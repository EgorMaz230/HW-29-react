{"version":3,"sources":["redux/selectors.js","redux/contactsSlice.js","redux/filterSlice.js","App.jsx","redux/store.js","index.js"],"names":["selectIsLoading","state","contacts","isLoading","selectError","error","selectFilteredContacts","createSelector","items","filter","contact","name","toLowerCase","includes","axios","defaults","baseURL","fetchContacts","createAsyncThunk","async","_","thunkAPI","get","data","e","rejectWithValue","message","addContact","post","deleteContact","id","delete","concat","contactsSlice","createSlice","initialState","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","push","x","setFilter","type","filterReducer","arguments","length","undefined","App","useSelector","dispatch","useDispatch","useEffect","React","createElement","className","onSubmit","preventDefault","target","elements","inputname","value","number","inputnumber","reset","required","placeholder","pattern","delID","onInput","map","key","store","configureStore","reducer","contactsReducer","createRoot","document","getElementById","render","StrictMode","Provider"],"mappings":"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","file":"static/js/main.4ac0264a.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const selectContacts = state => state.contacts.items;\r\nexport const selectIsLoading = state => state.contacts.isLoading;\r\nexport const selectError = state => state.contacts.error;\r\nexport const selectFilter = state => state.filter;\r\n\r\n\r\nexport const selectFilteredContacts = createSelector(\r\n  [selectContacts, selectFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://685bf45b89952852c2dba500.mockapi.io';\r\n\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchAll',\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const response = await axios.get('/contacts');\r\n      return response.data;\r\n    } catch (e) {\r\n      return thunkAPI.rejectWithValue(e.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async (contact, thunkAPI) => {\r\n    try {\r\n      const response = await axios.post('/contacts', contact);\r\n      return response.data;\r\n    } catch (e) {\r\n      return thunkAPI.rejectWithValue(e.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (id, thunkAPI) => {\r\n    try {\r\n      await axios.delete(`/contacts/${id}`);\r\n      return id;\r\n    } catch (e) {\r\n      return thunkAPI.rejectWithValue(e.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: {\r\n    items: [],\r\n    isLoading: false,\r\n    error: null\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(fetchContacts.pending, state => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchContacts.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.items = action.payload;\r\n      })\r\n      .addCase(fetchContacts.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.payload;\r\n      })\r\n\r\n      .addCase(addContact.pending, state => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(addContact.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.items.push(action.payload);\r\n      })\r\n      .addCase(addContact.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.payload;\r\n      })\r\n\r\n      .addCase(deleteContact.pending, state => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(deleteContact.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.items = state.items.filter(x => x.id !== action.payload);\r\n      })\r\n      .addCase(deleteContact.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.payload;\r\n      });\r\n  }\r\n});\r\n\r\nexport default contactsSlice.reducer;\r\n","\r\n\r\nconst initialState = '';\r\n\r\nexport const setFilter = (payload) => ({\r\n  type: 'filter/setFilter',\r\n  payload,\r\n});\r\n\r\nconst filterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'filter/setFilter':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default filterReducer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  selectFilteredContacts,\r\n  selectIsLoading,\r\n  selectError,\r\n} from './redux/selectors';\r\n\r\nimport { addContact, deleteContact, fetchContacts } from './redux/contactsSlice';\r\n\r\nimport { setFilter } from './redux/filterSlice';\r\n\r\nfunction App() {\r\nconst contacts = useSelector(selectFilteredContacts);\r\nconst isLoading = useSelector(selectIsLoading);\r\nconst error = useSelector(selectError);\r\n  const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const add = e => {\r\n    e.preventDefault();\r\n    dispatch(addContact({\r\n      name: e.target.elements.inputname.value,\r\n      number: e.target.elements.inputnumber.value\r\n    }));\r\n    e.target.reset();\r\n  };\r\n\r\n const del = e => {\r\n  e.preventDefault();\r\n  dispatch(deleteContact(e.target.elements.delID.value));\r\n  e.target.reset();\r\n};\r\n\r\n  const filt = e => {\r\n    dispatch(setFilter(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Contacts</h1>\r\n\r\n      <form onSubmit={add}>\r\n        <input required name=\"inputname\" placeholder=\"Name\" />\r\n        <input required name=\"inputnumber\" placeholder=\"Number\" pattern=\"^[^A-Za-z]*$\" />\r\n        <button type=\"submit\">Add Contact</button>\r\n      </form>\r\n\r\n      <form onSubmit={del}>\r\n        <input required name=\"delID\" type=\"number\" placeholder=\"ID\" />\r\n        <button type=\"submit\">Delete Contact</button>\r\n      </form>\r\n\r\n     <input\r\n  type=\"text\"\r\n  placeholder=\"Filter\"\r\n  onInput={filt}\r\n/>\r\n\r\n      <ul>\r\n  {contacts.map(x => (\r\n    <li key={x.id}>\r\n      <span className=\"id\">#{x.id}</span> {x.name} <code>{x.number}</code>\r\n    </li>\r\n  ))}\r\n</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contactsSlice';\r\nimport filterReducer from './filterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    filter: filterReducer,\r\n  },\r\n});\r\n","import React from 'react'\r\nimport { StrictMode } from 'react'\r\nimport { createRoot } from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './App.jsx'\r\nimport { store } from './redux/store';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\ncreateRoot(document.getElementById('root')).render(\r\n  <StrictMode>\r\n    <Provider store={store}>\r\n    \r\n      <App/>\r\n      \r\n    </Provider>\r\n  </StrictMode>\r\n)"],"sourceRoot":""}